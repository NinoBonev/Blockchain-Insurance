buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_gradle_plugins_version = '4.0.42'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        corda_platform_version = '4'
        corda_release_version = '4.3'
        accounts_release_version = '1.0'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"
        tokens_release_version = '1.1-RC05-PRESIGN'
        tokens_release_group = 'com.r3.corda.lib.tokens'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib" }
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev" }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-dev" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version")
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib" }
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev" }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-dev" }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {

    // Corda dependencies.
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
//    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp group: "$accounts_release_group", name : "accounts-contracts", version: "$accounts_release_version"
    cordapp group : "$confidential_id_release_group", name : "ci-workflows", version : "$confidential_id_release_version"
    cordapp group: "$accounts_release_group", name: "accounts-workflows", version : "$accounts_release_version"
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-selection:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"

}

cordapp {
    info {
        name "CorDapp Template"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    directory "./build/nodes"

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapps = [
                "$accounts_release_group:accounts-contracts:$accounts_release_version",
                "$accounts_release_group:accounts-workflows:$accounts_release_version",
                "$confidential_id_release_group:ci-workflows:$confidential_id_release_version",
                "$project.group:workflows:$project.version",
                "$tokens_release_group:tokens-contracts:$tokens_release_version",
                "$tokens_release_group:tokens-workflows:$tokens_release_version",
                "$tokens_release_group:tokens-selection:$tokens_release_version",
                "$tokens_release_group:tokens-money:$tokens_release_version"
        ]
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapps = [
                "$accounts_release_group:accounts-contracts:$accounts_release_version",
                "$accounts_release_group:accounts-workflows:$accounts_release_version",
                "$confidential_id_release_group:ci-workflows:$confidential_id_release_version",
                "$project.group:workflows:$project.version",
                "$tokens_release_group:tokens-contracts:$tokens_release_version",
                "$tokens_release_group:tokens-workflows:$tokens_release_version",
                "$tokens_release_group:tokens-selection:$tokens_release_version",
                "$tokens_release_group:tokens-money:$tokens_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        cordapps = [
                "$accounts_release_group:accounts-contracts:$accounts_release_version",
                "$accounts_release_group:accounts-workflows:$accounts_release_version",
                "$confidential_id_release_group:ci-workflows:$confidential_id_release_version",
                "$project.group:workflows:$project.version",
                "$tokens_release_group:tokens-contracts:$tokens_release_version",
                "$tokens_release_group:tokens-workflows:$tokens_release_version",
                "$tokens_release_group:tokens-selection:$tokens_release_version",
                "$tokens_release_group:tokens-money:$tokens_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

